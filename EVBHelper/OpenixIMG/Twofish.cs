//using Org.BouncyCastle.Crypto;
//using Org.BouncyCastle.Crypto.Parameters;

namespace OpenixIMG
{
    public sealed class TwofishEngine : IBlockCipher
    {
        private const int BlockSize = 16; // bytes
        private const int Rounds = 16;
        private const int MaxKeyBits = 256;
        private const int MaxKeyWords = MaxKeyBits / 32;

        private bool _forEncryption;
        private uint[]? _gSubKeys;
        private uint[]? _gSBox;

        private static readonly byte[,] P = new byte[2, 256];

        static TwofishEngine()
        {
            var p0 = new byte[] { 0xA9, 0x67, 0xB3, 0xE8, 0x04, 0xFD, 0xA3, 0x76, 0x9A, 0x92, 0x80, 0x78, 0xE4, 0xDD, 0xD1, 0x38, 0x0D, 0xC6, 0x35, 0x98, 0x18, 0xF7, 0xEC, 0x6C, 0x43, 0x75, 0x37, 0x26, 0xFA, 0x13, 0x94, 0x48, 0xF2, 0xD0, 0x8B, 0x30, 0x84, 0x54, 0xDF, 0x23, 0x19, 0x5B, 0x3D, 0x59, 0xF3, 0xAE, 0xA2, 0x82, 0x63, 0x01, 0x83, 0x2E, 0xD9, 0x51, 0x9B, 0x7C, 0xA6, 0xEB, 0xA5, 0xBE, 0x16, 0x0C, 0xE3, 0x61, 0xC0, 0x8C, 0x3A, 0xF5, 0x73, 0x2C, 0x25, 0x0B, 0xBB, 0x4E, 0x89, 0x6B, 0x53, 0x6A, 0xB4, 0xF1, 0xE1, 0xE6, 0xBD, 0x45, 0xE2, 0xF4, 0xB6, 0x66, 0xCC, 0x95, 0x03, 0x56, 0xD4, 0x1C, 0x1E, 0xD7, 0xFB, 0xC3, 0x8E, 0xB5, 0xE9, 0xCF, 0xBF, 0xBA, 0xEA, 0x77, 0x39, 0xAF, 0x33, 0xC9, 0x62, 0x71, 0x81, 0x79, 0x09, 0xAD, 0x24, 0xCD, 0xF9, 0xD8, 0xE5, 0xC5, 0xB9, 0x4D, 0x44, 0x08, 0x86, 0xE7, 0xA1, 0x1D, 0xAA, 0xED, 0x06, 0x70, 0xB2, 0xD2, 0x41, 0x7B, 0xA0, 0x11, 0x31, 0xC2, 0x27, 0x90, 0x20, 0xF6, 0x60, 0xFF, 0x96, 0x5C, 0xB1, 0xAB, 0x9E, 0x9C, 0x52, 0x1B, 0x5F, 0x93, 0x0A, 0xEF, 0x91, 0x85, 0x49, 0xEE, 0x2D, 0x4F, 0x8F, 0x3B, 0x47, 0x87, 0x6D, 0x46, 0xD6, 0x3E, 0x69, 0x64, 0x2A, 0xCE, 0xCB, 0x2F, 0xFC, 0x97, 0x05, 0x7A, 0xAC, 0x7F, 0xD5, 0x1A, 0x4B, 0x0E, 0xA7, 0x5D, 0x28, 0xCA, 0x29, 0xDE, 0x95, 0x9A, 0x6F, 0x7D, 0x55, 0x49, 0x7A, 0x27, 0x5F, 0xB8, 0x88, 0xE9, 0xC8, 0x52, 0x6B, 0x8F, 0xC6, 0x42, 0x61, 0x3F, 0xEE, 0xA8, 0x8C, 0x5A, 0xEF, 0xBC, 0x16, 0x34, 0x90, 0x36, 0x4D, 0x60, 0xF4, 0x37, 0x9D, 0x6C, 0x4A, 0x56, 0xBA, 0x28, 0x75, 0x64, 0x05, 0x86, 0x02, 0x7B, 0xA1, 0x8E, 0xB1, 0x47, 0x2A, 0x9C, 0x5E, 0x46, 0x04, 0x0C, 0x93, 0x5D, 0x2D, 0x7E, 0x0F, 0x08, 0xE3, 0x65, 0x57, 0x71, 0x4B, 0xA4, 0x22, 0x30, 0x81, 0x4E, 0x18, 0x6A, 0xCD, 0x3A, 0x0E, 0x79, 0xE0, 0x1F, 0x0B, 0xAD, 0x24, 0x00, 0xC7, 0x5B, 0x20, 0x58, 0x74, 0xB6, 0x40, 0x84, 0x91, 0x62, 0x3D, 0x4C, 0x1A, 0xA2, 0x0A, 0x32, 0x70, 0x85, 0x80, 0x5C, 0xCF, 0xD9, 0x11, 0x1D, 0x10, 0xDE, 0xD8, 0x07, 0x72, 0x2E, 0x83, 0xF6, 0x44, 0x7C, 0x8A, 0x09, 0x45, 0x96, 0x3E, 0x6E, 0x12, 0x17, 0xE1, 0x14, 0x76, 0x15, 0x41, 0xFD, 0x3B, 0xAB, 0x9B, 0x21, 0x73, 0x9F, 0xF5, 0x69, 0x39, 0x31, 0x8D, 0x33, 0x97, 0xAE, 0xBF, 0x2B, 0x06, 0x03, 0x51, 0x25, 0xC4, 0x50, 0x1B, 0x99, 0x29, 0xE2, 0xCB, 0x7F, 0x53, 0x2F, 0x87, 0x68, 0x4F, 0x89, 0x1C, 0x48, 0xB7, 0xC5, 0x7D, 0xEA, 0xF7, 0xF1, 0x54, 0xAC, 0x2D, 0x29, 0x82, 0x81, 0x9A, 0x40, 0x38, 0x96, 0x13, 0x8C, 0x87, 0xCB, 0x5D, 0x30, 0x6D, 0x04, 0x74, 0x4A, 0x07, 0x44, 0x3A, 0x46, 0x4C, 0x69, 0x2A, 0x0E, 0x83, 0xB4, 0x65, 0x79, 0x09, 0x6B, 0x93, 0x63, 0x5A, 0x62, 0x3D, 0x3E, 0x8F, 0x12, 0xC0, 0x71, 0x38, 0xEE, 0x7C, 0x95, 0x1A, 0x42, 0x9C, 0x2D, 0x8D, 0x0B, 0x81, 0xED, 0x3B, 0x54, 0x3C, 0x11, 0x5F, 0x34, 0x98, 0xDA, 0x7F, 0x21, 0x10, 0x58, 0x64, 0xB7, 0x72, 0x08, 0x25, 0x66, 0xDC, 0xF8, 0xF7, 0x43, 0x76, 0x8A, 0xB0, 0x17, 0xF5, 0x97, 0xC9, 0x55, 0x84, 0x96, 0x89, 0x77, 0x7E, 0x94, 0xB3, 0xE6, 0x0A, 0xED, 0x0C, 0xA8, 0x49, 0x1C, 0x24, 0x06, 0x0B, 0x78, 0x9E, 0x4E, 0x03, 0xD2, 0x60, 0x2F, 0x41, 0x56, 0x01, 0x1D, 0x28, 0xD5, 0xF0, 0x51, 0x18, 0x0F, 0xC8, 0x91, 0x16, 0xFB, 0xC2, 0xE5, 0xE2, 0xAD, 0x88, 0x02, 0x75, 0x7A, 0xB5, 0xBE, 0x19, 0x45, 0xDE, 0xD9, 0x00, 0x8B, 0x85, 0xE3, 0x59, 0xCF, 0xCD, 0x48, 0x50, 0x28, 0x5C, 0x86, 0x53, 0x31, 0x3F, 0x26, 0x5B, 0x92, 0x35, 0x23, 0x4B, 0x53, 0x1A, 0x39, 0x67, 0x2C, 0x00, 0x9F, 0x05, 0x0F, 0x70, 0x37, 0x99, 0x51, 0x68, 0x32, 0xDE, 0xA0, 0x30, 0x4D, 0x1E, 0x85, 0xF4, 0x61, 0x66, 0x7D, 0x19, 0xFA, 0x8E, 0x14, 0x15, 0xE0, 0x47, 0x73, 0xD7, 0x58, 0x80, 0x17, 0x2E, 0x9E, 0x7B, 0xB9, 0xB1, 0x33, 0x36, 0x1B, 0x03, 0x0D, 0x5E, 0x6C, 0x20, 0x4F, 0x22, 0xA1, 0xFC, 0x1D, 0x74, 0x52, 0x45, 0x8B, 0x77, 0xB8, 0x2B, 0x7A, 0x18, 0xBA, 0x16, 0xAE, 0x89, 0x63, 0x41, 0xBF, 0x6E, 0x02, 0x0C, 0xAA, 0x57, 0xC5, 0xF9, 0xF6, 0x55, 0x9D, 0x42, 0x24, 0xF2, 0xC7, 0xA3, 0x86, 0xDB, 0x1F, 0xC3, 0xA5, 0x7E, 0xC4, 0xFE, 0xAC, 0x27, 0x59, 0x1C, 0x40, 0xD1, 0xF1, 0x90, 0xD3, 0xBE, 0xD4, 0xB2, 0xBC, 0xDF, 0xA7, 0xA4, 0xB6, 0xAD, 0x06, 0xBD, 0x4E, 0x54, 0x35, 0x5C, 0x78, 0x01, 0x84, 0x29, 0xD6, 0x76, 0x75, 0xE8, 0xEB, 0xA2, 0xEF, 0x9B, 0xE4, 0xC6, 0x94, 0x97, 0xE7, 0xDD, 0xF3, 0xCE, 0xCC, 0xD8, 0x10, 0x08, 0x2D, 0x93, 0x25, 0xD0, 0x15, 0x6F, 0x8A, 0x0A, 0x6A, 0x2F, 0xB5, 0x58, 0xA9, 0x71, 0xC1, 0xB3, 0x83, 0xBA, 0x3B, 0x95, 0xC1, 0x4B, 0x3A, 0x5A, 0x58, 0xFE, 0x8F, 0x3F, 0x03, 0x9F, 0x57, 0xAE, 0xE1, 0x98, 0x00, 0x70, 0x6E, 0x1E, 0x22, 0x7D, 0x2B, 0x88, 0x82, 0x7F, 0x14, 0x27, 0x31, 0x9C, 0x3C, 0x59, 0x0B, 0x60, 0xA6, 0x1D, 0x48, 0x01, 0x36, 0xF2, 0xD3, 0xCE, 0xC3, 0x34, 0x41, 0x15, 0x6C, 0x8D, 0x9D, 0x39, 0x6A, 0x02, 0x80, 0x56, 0xBB, 0x45, 0x79, 0xD4, 0xB2, 0x07, 0x51, 0x47, 0x05, 0x9B, 0x20, 0x1F, 0xDE, 0xBD, 0x5E, 0x74, 0xB1, 0x89, 0xEC, 0x85, 0x19, 0x2A, 0x77, 0x13, 0x8E, 0x33, 0x50, 0x04, 0x55, 0x0D, 0x2E, 0x78, 0xA0, 0x99, 0xE5, 0x18, 0x61, 0x90, 0x35, 0xF1, 0x8B, 0x09, 0xDC, 0x40, 0x86, 0xAC, 0x26, 0xF9, 0x30, 0x4F, 0x91, 0xCA, 0x16, 0xF6, 0x73, 0x9E, 0x44, 0x75, 0xE7, 0xB6, 0xF3, 0xA7, 0xC4, 0x1C, 0xAB, 0xC5, 0x63, 0xDB, 0xE4, 0xBF, 0xB8, 0xDA, 0xDD, 0xFC, 0x7C, 0x2C, 0xD6, 0xAF, 0x83, 0x6F, 0xA4, 0x7B, 0xEA, 0xD7, 0x52, 0x0E, 0x4E, 0x68, 0xEF, 0xAA, 0xBE, 0xA1, 0xDF, 0x42, 0xD0, 0xA3, 0x5C, 0x37, 0x06, 0x29, 0x17, 0x67, 0x32, 0xA5, 0x11, 0xC7, 0xB9, 0xD1, 0x23, 0x94, 0xCC, 0xF0, 0x0D, 0x84, 0x0F, 0xD5, 0xCD, 0x14, 0x5B, 0x9A, 0xBA, 0x76, 0x8C, 0x18, 0x20, 0x92, 0x8B, 0xA2, 0xE9, 0xB5, 0x57, 0x71, 0x30, 0x7D, 0x6B, 0x9D, 0x3C, 0x51, 0x9F, 0x47, 0x24, 0x6E, 0x0E, 0x45, 0xDF, 0x02, 0x36, 0x08, 0x52, 0x39, 0xC6, 0x4A, 0x50, 0x34, 0x0A, 0x26, 0x4C, 0x04, 0x48, 0xB6, 0x4B, 0x85, 0x31, 0x9E, 0x41, 0x5F, 0x07, 0x01, 0x03, 0x56, 0x2E, 0x86, 0x1F, 0x27, 0x05, 0x3B, 0x55, 0x0C, 0x4F, 0x6A, 0x89, 0x69, 0x97, 0x28, 0x79, 0xBC, 0xD8, 0x7B, 0x88, 0xA0, 0x1D, 0x91, 0x19, 0x49, 0x21, 0x16, 0xEC, 0xDB, 0x33, 0xF8, 0x37, 0xFB, 0xBF, 0x06, 0x83, 0x5D, 0x50, 0x40, 0x09, 0x6F, 0x0D, 0x23, 0x72, 0x60, 0x9B, 0xCF, 0xCE, 0x90, 0x44, 0xE2, 0xD2, 0xBE, 0x78, 0x0A, 0x54, 0xB7, 0xDC, 0xE8, 0xE5, 0x1C, 0x43, 0x2A, 0xAC, 0x5C, 0x61, 0xF3, 0xF6, 0xF0, 0x29, 0x75, 0xEB, 0x10, 0x13, 0x15, 0x6D, 0xC5, 0xEF, 0xED, 0xA8, 0x4E, 0x18, 0x95, 0x1B, 0x82, 0x8E, 0x35, 0x30, 0x2D, 0x77, 0x74, 0x17, 0xC8, 0xA7, 0xDE, 0xFC, 0xC7, 0x2E, 0x84, 0x99, 0xDA, 0x76, 0x25, 0xD5, 0x68, 0xBD, 0x04, 0x92, 0x0B, 0x71, 0x94, 0x93, 0xB1, 0x22, 0x6C, 0x20, 0x0E, 0x0F, 0x8A, 0x32, 0xE0, 0xAE, 0x28, 0xE6, 0xDD, 0x14, 0x63, 0x2C, 0xBA, 0x02, 0x2F, 0x59, 0x1A, 0x87, 0xFD, 0x9C, 0xFA, 0x4D, 0x03, 0xB9, 0x73, 0x38, 0x51, 0xC4, 0x12, 0x7A, 0x42, 0xCD, 0xB3, 0x2B, 0x80, 0x57, 0xAD, 0xAB, 0xD1, 0xFE, 0xB8, 0x11, 0x3E, 0x45, 0x66, 0x64, 0x3B, 0x05, 0xA1, 0x97, 0x96, 0xE1, 0x65, 0x81, 0x7B, 0x26, 0xD6, 0xEA, 0x67, 0xA4, 0x5E, 0x15, 0x3D, 0x00, 0x22, 0x7D, 0x8D, 0x0C, 0x5F, 0x33, 0x9D, 0x1E, 0x89, 0x5B, 0x85, 0x37, 0x70, 0x47, 0x48, 0x62, 0xE7, 0x9E, 0x3A, 0xAA, 0xFB, 0x99, 0x10, 0x25, 0x07, 0x0B, 0x8E, 0x6B, 0x0D, 0xEF, 0x31, 0xA9, 0x6C, 0x14, 0x13, 0x7F, 0x93, 0xCA, 0x20, 0x06, 0x09, 0xB1, 0x59, 0x0A, 0x7E, 0x68, 0xD0, 0x95, 0x4C, 0x3F, 0xD4, 0x32, 0x44, 0xDA, 0x1C, 0x12, 0xCD, 0x8C, 0x8A, 0x40, 0x3E, 0x54, 0x2F, 0xDC, 0x7C, 0x65, 0x5A, 0x79, 0xF7, 0x56, 0x4D, 0x1B, 0x29, 0xEB, 0xF5, 0xE3, 0xE6, 0xC4, 0xC2, 0xD3, 0xAC, 0x61, 0x98, 0x9F, 0x35, 0xD5, 0x8B, 0x22, 0xE0, 0x94, 0x57, 0x77, 0x03, 0x0E, 0x43, 0x82, 0x63, 0x9B, 0x30, 0xED, 0x4A, 0x0F, 0x7D, 0x38, 0x8D, 0x27, 0x4F, 0x2B, 0x01, 0x52, 0x1A, 0x9A, 0xB9, 0xC9, 0xD9, 0x00, 0x88, 0x55, 0xAD, 0x1D, 0x92, 0xB0, 0xEE, 0x5E, 0x24, 0xF9, 0xF0, 0xC8, 0x67, 0xA2, 0x81, 0x7B, 0xA7, 0x0C, 0x34, 0xB8, 0x2E, 0xB3, 0x16, 0x51, 0x74, 0xFA, 0xEC, 0xE9, 0xFE, 0xFF, 0x2C, 0x19, 0xCF, 0xDD, 0xAF, 0xDE, 0x37, 0x97, 0xC3, 0xA8, 0xAB, 0xC0, 0x58, 0x1E, 0x91, 0xC1, 0x41, 0x84, 0x05, 0xDF, 0x2D, 0x69, 0x5D, 0x53, 0x73, 0x90, 0x45, 0x62, 0x76, 0x70, 0xB6, 0xD6, 0xF1, 0xA0, 0xCC, 0x4B, 0xB5, 0x42, 0x02, 0x72, 0x04, 0xF6, 0x50, 0x85, 0x2A, 0xFD, 0xE7, 0xCB, 0x86, 0x17, 0xDB, 0x39, 0x6A, 0xA3, 0x3C, 0x56, 0x46, 0x07, 0x09, 0x31, 0x57, 0x13, 0x21, 0x9C, 0xBA, 0x8E, 0x48, 0x15, 0x6E, 0x26, 0xC6, 0x14, 0x9F, 0x5F, 0x32, 0xBD, 0xA4, 0x01, 0xFB, 0xC5, 0x08, 0x79, 0xE0, 0xBF, 0xDA, 0xDC, 0x25, 0x60, 0xBE, 0xEA, 0x93, 0x9E, 0x75, 0x10, 0x71, 0xAE, 0x20, 0x6F, 0x8F, 0xBB, 0x80, 0xEB, 0x47, 0xB2, 0x30, 0x4D, 0x0D, 0xD0, 0xD4, 0x4C, 0x1F, 0x29, 0xCD, 0x0A, 0x7A, 0xAC, 0x2E, 0x5E, 0x64, 0x03, 0x35, 0x0B, 0x59, 0xFA, 0x89, 0x0E, 0x98, 0x23, 0x7B, 0xE8, 0x68, 0x99, 0x27, 0xC7, 0xF9, 0xC0, 0x97, 0x0F, 0x7F, 0x4A, 0x22, 0x17, 0x5B, 0x0D, 0xBA, 0x51, 0x82, 0x53, 0x1A, 0x48, 0x14, 0x4B, 0x2B, 0x9C, 0x19, 0x40, 0xB0, 0xDE, 0x5C, 0x0B, 0x9B, 0xE6, 0x32, 0x9A, 0x8F, 0x68, 0x17, 0x8C, 0x3A, 0x91, 0x45, 0x58, 0x05, 0x5D, 0x02, 0x15, 0x44, 0x59, 0x71, 0x87, 0x69, 0x65, 0x86, 0xEC, 0x9F, 0x27, 0x0F, 0x0C, 0x2A, 0x92, 0x84, 0xA1, 0xC3, 0x4D, 0x13, 0x8A, 0x75, 0x7D, 0x6D, 0x70, 0x57, 0xF0, 0x8D, 0x4C, 0x63, 0x5B, 0x2D, 0xAE, 0x29, 0x11, 0xCB, 0x16, 0x00, 0x2E, 0xE1, 0x3B, 0x66, 0x5A, 0xBE, 0x31, 0x36, 0x28, 0x55, 0x49, 0x76, 0x60, 0x7E, 0x5E, 0x4E, 0xA5, 0x83, 0x46, 0xD6, 0xA3, 0x38, 0x30, 0xD0, 0x2C, 0x7C, 0x94, 0x1C, 0x4F, 0x9B, 0x7F, 0x7A, 0x47, 0xDD, 0x8B, 0x72, 0x95, 0x96, 0x80, 0x78, 0x2F, 0x12, 0x35, 0x54, 0xBF, 0x10, 0x18, 0x90, 0x07, 0x85, 0x61, 0xAF, 0xAD, 0xDB, 0x6A, 0x6F, 0xFB, 0x97, 0x4A, 0x06, 0x79, 0x5C, 0x1D, 0x93, 0x01, 0x81, 0x4B, 0x37, 0x33, 0x62, 0x03, 0x6E, 0x34, 0x23, 0xD3, 0xE4, 0xAB, 0x04, 0x25, 0xAC, 0x7B, 0xF1, 0x56, 0x6B, 0x82, 0x98, 0x39, 0xB3, 0xDA, 0x08, 0xFC, 0x9E, 0x8E, 0x42, 0x24, 0xE5, 0xBC, 0xBB, 0xF2, 0xCD, 0x50, 0x1A, 0x9D, 0xFD, 0x1E, 0x88, 0x09, 0xC7, 0x26, 0x99, 0xE0, 0x10, 0xA0, 0x64, 0x15, 0x3F, 0x0E, 0x74, 0x22, 0xF4, 0x53, 0xD5, 0xC2, 0x6C, 0x11, 0x0C, 0x73, 0x51, 0x83, 0x3D, 0x01, 0x0B, 0x45, 0x41, 0x8F, 0x52, 0x3B, 0x28, 0xE9, 0xCE, 0x95, 0x43, 0xCF, 0x30, 0x6D, 0x7A, 0x0A, 0x4E, 0x55, 0x27, 0x94, 0xA8, 0x90, 0x78, 0x61, 0x76, 0xDD, 0x46, 0x16, 0x96, 0x02, 0x89, 0x49, 0x3E, 0xA7, 0xAA, 0xFB, 0x70, 0x67, 0xEB, 0x2D, 0xFE, 0x82, 0x04, 0x9B, 0x50, 0x08, 0x54, 0x35, 0x77, 0x18, 0x93, 0x2E, 0x00, 0x0D, 0x5D, 0x4C, 0x42, 0x97, 0x1E, 0x6F, 0x7C, 0x12, 0x1D, 0x8D, 0x75, 0x8B, 0x80, 0x06, 0xF8, 0x6A, 0x3C, 0xB4, 0x2C, 0x03, 0x85, 0x33, 0x5F, 0x40, 0xE1, 0xE0, 0x9F, 0x5A, 0xA5, 0x79, 0x58, 0x1B, 0x84, 0x24, 0x39, 0xBA, 0x60, 0x56, 0xD8, 0x81, 0x57, 0xD1, 0x2A, 0x2F, 0x91, 0xC1, 0x4A, 0x6B, 0x9E, 0x3F, 0x7B, 0x09, 0x38, 0x21, 0x34, 0x1C, 0x0E, 0x07, 0xC8, 0x5B, 0x25, 0x47, 0x8E, 0x36, 0x9D, 0xBD, 0x6E, 0x37, 0x53, 0x19, 0xCE, 0xCB, 0x3D, 0x10, 0xB3, 0xAC, 0xF5, 0xF6, 0xEE, 0xA4, 0x48, 0x72, 0x90, 0xA0, 0xED, 0xBF, 0x6C, 0xA6, 0x94, 0xB5, 0x41, 0x88, 0x5C, 0x0A, 0x86, 0x62, 0x22, 0x95, 0x5E, 0xDC, 0x26, 0x14, 0xC5, 0x30, 0xC4, 0xF7, 0x04, 0xB7, 0x01, 0x43, 0xDF, 0x20, 0xE7, 0xE2, 0x96, 0xCC, 0x64, 0xD2, 0x7D, 0x05, 0x1F, 0xAB, 0xE3, 0xA9, 0x99, 0xD7, 0x2D, 0x00, 0x83, 0xA2, 0x1B, 0xD5, 0xB9, 0xC6, 0x73, 0xF3, 0xEA, 0x85, 0x3E, 0x51, 0xCA, 0x1D, 0x2C, 0x59, 0x2B, 0x74, 0x3F, 0xF2, 0x02, 0x0B, 0x4E, 0x5D, 0x09, 0x69, 0x40, 0xA7, 0x70, 0x3C, 0x67, 0x1E, 0x76, 0x78, 0x80, 0x5F, 0x9E, 0x18, 0x4F, 0xB2, 0xE8, 0xC8, 0xF8, 0x9C, 0x1C, 0x89, 0x79, 0x03, 0x61, 0x06, 0x77, 0x2A, 0x21, 0xB1, 0x91, 0x3A, 0xDE, 0xD4, 0x44, 0x0C, 0x5A, 0x0D, 0xBE, 0x1A, 0x55, 0x32, 0x17, 0xF9, 0xB4, 0xB6, 0x05, 0x0E, 0x45, 0xE6, 0xE9, 0x93, 0xD9, 0x87, 0xC1, 0xBD, 0xFB, 0xDA, 0xF6, 0xF4, 0xCE, 0x42, 0xFE, 0x2E, 0x75, 0xFF, 0xAC, 0xBA, 0x34, 0x5B, 0x9D, 0x3D, 0x48, 0x35, 0xD8, 0xF5, 0xEF, 0x15, 0x19, 0x7C, 0xA6, 0xB8, 0xC0, 0xB7, 0x60, 0x63, 0x8D, 0xAA, 0x47, 0x07, 0x08, 0x5E, 0x28, 0x20, 0x12, 0x13, 0x71, 0x9F, 0x01, 0x9B, 0x8E, 0x33, 0x25, 0xED, 0x43, 0x1F, 0x0A, 0x09, 0x6C, 0x31, 0x6B, 0x52, 0x40, 0x51, 0x7E, 0x14, 0x1B, 0x94, 0x30, 0x8B, 0x8C, 0x00, 0x2C, 0xAF, 0x4E, 0x9E, 0x79, 0xE4, 0xB5, 0xE9, 0xD1, 0xD5, 0x3F, 0x74, 0xA5, 0x8A, 0x16, 0x2F, 0x72, 0x55, 0x3E, 0xF7, 0xF3, 0x50, 0xA8, 0x66, 0x2A, 0x0D, 0x85, 0x0B, 0xC5, 0x59, 0xC9, 0xD0, 0x57, 0xC4, 0x89, 0x7F, 0x1D, 0x3C, 0x7D, 0x1C, 0x04, 0x97, 0x1A, 0x3B, 0x53, 0x2E, 0x83, 0xD9, 0xB2, 0xBD, 0x61, 0x78, 0x96, 0xC3, 0xAD, 0x67, 0x49, 0xF6, 0xEC, 0x70, 0x75, 0x58, 0xDE, 0x76, 0x41, 0x18, 0xAB, 0x98, 0x2B, 0x4F, 0xDF, 0xC8, 0x5A, 0x02, 0x7B, 0xAE, 0xA7, 0x29, 0x34, 0x44, 0x64, 0xE1, 0x42, 0x38, 0xC0, 0x1E, 0x80, 0xBF, 0x05, 0xBB, 0xAC, 0x7C, 0xA3, 0x56, 0xDD, 0xCB, 0xBE, 0xFE, 0xDB, 0x95, 0xC6, 0xE3, 0xB1, 0x90, 0x91, 0x86, 0xA6, 0xDC, 0xE8, 0x92, 0xB0, 0x32, 0x73, 0x69, 0xD2, 0xB4, 0x06, 0x03, 0x5C, 0x17, 0x93, 0x35, 0x45, 0x36, 0x22, 0x82, 0xF0, 0xCC, 0x9F, 0x20, 0x48, 0x84, 0x07, 0x54, 0x19, 0x62, 0x2C, 0x30, 0x77, 0x4B, 0xE2, 0x4D, 0x15, 0x6A, 0xA9, 0xFB, 0x14, 0x9E, 0x2D, 0x01, 0x0E, 0x5E, 0x09, 0x7E, 0x13, 0x60, 0x87, 0x0C, 0x5D, 0x24, 0x1C, 0x8D, 0x6E, 0x81, 0x37, 0x3A, 0x7F, 0x57, 0xC7, 0x85, 0xAA, 0xB6, 0x40, 0x5F, 0xCA, 0x12, 0xF9, 0xF5, 0xF2, 0xEE, 0xB3, 0xA1, 0x28, 0x9C, 0x47, 0x0A, 0x94, 0x1B, 0x46, 0xB8, 0x65, 0x75, 0xCD, 0xB9, 0x26, 0x31, 0x5B, 0x33, 0x63, 0xC1, 0x2A, 0x10, 0xEF, 0x8F, 0x0B, 0x0D, 0x59, 0x04, 0x2E, 0xC5, 0x6B, 0x79, 0xDE, 0x88, 0xAD, 0xD8, 0x7A, 0x9B, 0xBC, 0x58, 0x4E, 0x1D, 0x00, 0x39, 0x25, 0x1E, 0x8E, 0x99, 0x6D, 0x4C, 0x72, 0x02, 0x52, 0xF4, 0x3E, 0xD4, 0x9D, 0x03, 0x43, 0xD6, 0xB7, 0x8B, 0xB5, 0xD3, 0xBA, 0x5C, 0x0C, 0x0A, 0x2F, 0x1F, 0x26, 0x69, 0x45, 0x6A, 0x70, 0x09, 0x67, 0x6C, 0x78, 0xA0, 0x3C, 0x8D, 0x82, 0x17, 0x9A, 0x5E, 0x3B, 0x05, 0x0B, 0x5D, 0x2D, 0x7E, 0x48, 0x07, 0x88, 0x23, 0x57, 0x2B, 0x9E, 0x19, 0x4B, 0x8E, 0x0E, 0x3D, 0x44, 0x62, 0x80, 0x7B, 0x1E, 0x90, 0x24, 0x85, 0x94, 0x18, 0x04, 0x47, 0x01, 0x0D, 0x3F, 0x12, 0x59, 0x15, 0x41, 0x06, 0x74, 0x79, 0x64, 0x10, 0x43, 0x81, 0x83, 0x40, 0x02, 0x5A, 0x1C, 0x7C, 0x3A, 0x6B, 0x31, 0xA8, 0x3E, 0x91, 0x9D, 0x9C, 0xC5, 0x89, 0x6E, 0x51, 0x2A, 0x1B, 0x75, 0xAC, 0xF8, 0x2E, 0x56, 0x95, 0x4E, 0x6F, 0x72, 0xAD, 0x61, 0x28, 0xDE, 0xCD, 0xFA, 0xED, 0x8F, 0x87, 0xAA, 0x50, 0xB1, 0xB0, 0xB6, 0x7D, 0x5F, 0xB7, 0x58, 0xC4, 0xF5, 0xFC, 0xFE, 0x2C, 0x14, 0xB3, 0xAB, 0xBE, 0xDD, 0x54, 0xAF, 0x22, 0xA9, 0x73, 0x1D, 0x99, 0x84, 0x30, 0x37, 0x60, 0x16, 0xC7, 0xBD, 0xA2, 0x52, 0x03, 0xBB, 0x77, 0x00, 0x98, 0xC2, 0xDA, 0xD5, 0xB8, 0x49, 0x93, 0x20, 0x86, 0x0A, 0x71, 0x65, 0xE5, 0xCF, 0xDB, 0xF9, 0xF7, 0x4F, 0x35, 0x55, 0x13, 0x29, 0xBF, 0x08, 0x8A, 0x63, 0x21, 0x1C, 0x33, 0x5B, 0x0F, 0x09, 0x05, 0x01, 0x92, 0x1E, 0x4E, 0x7A, 0x32, 0x76, 0xA4, 0xB5, 0x2F, 0xC1, 0xF0, 0xCC, 0x78, 0xB9, 0x8B, 0xDC, 0xE0, 0xD3, 0xA3, 0x68, 0xAE, 0xCB, 0x34, 0x9B, 0xE2, 0x11, 0x5C, 0x6D, 0x97, 0xCA, 0x4D, 0xBC, 0x38, 0xE3, 0xDF, 0xD7, 0x5D, 0x5E, 0x57, 0xE4, 0x1A, 0xFB, 0xC3, 0x7C, 0xA7, 0x17, 0xB6, 0xF4, 0x25, 0x02, 0x04, 0x06, 0x0E, 0x0C, 0x0A, 0x12, 0x10, 0x16, 0x14, 0x1A, 0x18, 0x1E, 0x1C, 0x22, 0x20, 0x26, 0x24, 0x2A, 0x28, 0x2E, 0x2C, 0x32, 0x30, 0x36, 0x34, 0x3A, 0x38, 0x3E, 0x3C, 0x42, 0x40, 0x46, 0x44, 0x4A, 0x48, 0x4E, 0x4C, 0x52, 0x50, 0x56, 0x54, 0x5A, 0x58, 0x5E, 0x5C, 0x62, 0x60, 0x66, 0x64, 0x6A, 0x68, 0x6E, 0x6C, 0x72, 0x70, 0x76, 0x74, 0x7A, 0x78, 0x7E, 0x7C, 0x82, 0x80, 0x86, 0x84, 0x8A, 0x88, 0x8E, 0x8C, 0x92, 0x90, 0x96, 0x94, 0x9A, 0x98, 0x9E, 0x9C, 0xA2, 0xA0, 0xA6, 0xA4, 0xAA, 0xA8, 0xAE, 0xAC, 0xB2, 0xB0, 0xB6, 0xB4, 0xBA, 0xB8, 0xBE, 0xBC, 0xC2, 0xC0, 0xC6, 0xC4, 0xCA, 0xC8, 0xCE, 0xCC, 0xD2, 0xD0, 0xD6, 0xD4, 0xDA, 0xD8, 0xDE, 0xDC, 0xE2, 0xE0, 0xE6, 0xE4, 0xEA, 0xE8, 0xEE, 0xEC, 0xF2, 0xF0, 0xF6, 0xF4, 0xFA, 0xF8, 0xFE, 0xFC };
            var p1 = new byte[] { 0x75, 0xF3, 0xC6, 0xF4, 0xDB, 0x7B, 0xFB, 0xC8, 0x4A, 0xD3, 0xE6, 0x6B, 0x45, 0x7D, 0xE8, 0x4B, 0xD6, 0x32, 0xD8, 0xFD, 0x37, 0x71, 0xF1, 0xE1, 0x30, 0x0F, 0xF8, 0x1B, 0x87, 0xFA, 0x06, 0x3F, 0x5E, 0xBA, 0xAE, 0x5B, 0x8A, 0x00, 0xBC, 0x9D, 0x6D, 0xC1, 0xB1, 0x0E, 0x80, 0x5D, 0xD2, 0xD5, 0xA0, 0x84, 0x07, 0x14, 0xB5, 0x90, 0x2C, 0xA3, 0xB2, 0x73, 0x4C, 0x54, 0x92, 0x74, 0x36, 0x51, 0x38, 0xB0, 0xBD, 0x5A, 0xFC, 0x60, 0x62, 0x96, 0x6C, 0x42, 0xF7, 0x10, 0x7C, 0x28, 0x27, 0x8C, 0x13, 0x95, 0x9C, 0xC7, 0x24, 0x46, 0x3B, 0x70, 0xCA, 0xE3, 0x85, 0xCB, 0x11, 0xD0, 0x93, 0xB8, 0xA6, 0x83, 0x20, 0xFF, 0x9F, 0x77, 0xC3, 0xCC, 0x03, 0x6F, 0x08, 0xBF, 0x40, 0xE7, 0x2B, 0xE2, 0x79, 0x0C, 0xAA, 0x82, 0x41, 0x3A, 0xEA, 0xB9, 0xE4, 0x9A, 0xA4, 0x97, 0x7E, 0xDA, 0x7A, 0x17, 0x66, 0x94, 0xA1, 0x1D, 0x3D, 0xF0, 0xDE, 0xB3, 0x0B, 0x72, 0xA7, 0x1C, 0xEF, 0xD1, 0x53, 0x3E, 0x8F, 0x33, 0x26, 0x5F, 0xEC, 0x76, 0x2A, 0x49, 0x81, 0x88, 0xEE, 0x21, 0xC4, 0x1A, 0xEB, 0xD9, 0xC5, 0x39, 0x99, 0xCD, 0xAD, 0x31, 0x8B, 0x01, 0x18, 0x23, 0xDD, 0x1F, 0x4E, 0x2D, 0x8E, 0x25, 0x4A, 0xCE, 0x4D, 0x55, 0x89, 0x64, 0x50, 0x91, 0x15, 0x9B, 0x44, 0x59, 0x21, 0x5C, 0x63, 0xF6, 0x02, 0x6E, 0x48, 0x68, 0x86, 0x34, 0xBE, 0x56, 0x57, 0x04, 0xA5, 0x8D, 0x3C, 0xA9, 0x47, 0x16, 0x22, 0xDF, 0x69, 0x12, 0xA2, 0x7F, 0x09, 0x05, 0x67, 0x52, 0x35, 0x9E, 0x58, 0x19, 0x75, 0x98, 0x8A, 0x4F, 0x9D, 0x1E, 0x93, 0x0B, 0x8F, 0x82, 0x1D, 0x0C, 0x09, 0x78, 0x7C, 0xEF, 0xD4, 0xCF, 0x3B, 0x97, 0x02, 0x1A, 0x7A, 0x40, 0x00, 0x27, 0x77, 0x94, 0x61, 0x81, 0x3D, 0x28, 0x3A, 0x5A, 0x53, 0x37, 0x04, 0x51, 0x46, 0x18, 0x44, 0xAB, 0xFC, 0x67, 0x48, 0xB7, 0x5E, 0x32, 0x06, 0x03, 0x08, 0x0F, 0xD2, 0x30, 0x70, 0x7E, 0x54, 0xB5, 0x50, 0xDE, 0x4E, 0x64, 0x6A, 0x22, 0xC5, 0x01, 0x66, 0xDD, 0x98, 0x8E, 0x3F, 0x17, 0x1C, 0x9C, 0x4A, 0x11, 0x52, 0x7D, 0x9B, 0x39, 0x5B, 0x72, 0x15, 0x89, 0x6B, 0x95, 0xF0, 0x6F, 0x7B, 0x9E, 0x2E, 0x13, 0xCA, 0x33, 0xBE, 0x29, 0xDA, 0x5F, 0x65, 0x9A, 0x2C, 0x4D, 0x05, 0x83, 0x71, 0x96, 0x69, 0x19, 0x1B, 0x6D, 0x8C, 0x31, 0xBB, 0x74, 0xAC, 0xCB, 0xF1, 0x2F, 0x45, 0xED, 0x38, 0x88, 0x63, 0x58, 0xBA, 0x79, 0x47, 0xC0, 0xC4, 0xE4, 0x85, 0x0A, 0x3E, 0x91, 0x41, 0x2D, 0xBD, 0x1F, 0x3C, 0xB2, 0x90, 0xEA, 0x43, 0xB4, 0xAD, 0xD7, 0x62, 0xF2, 0x87, 0x07, 0xFB, 0x2A, 0x0E, 0xAA, 0x76, 0xDC, 0xF5, 0x10, 0x2B, 0xCC, 0x99, 0x12, 0x0D, 0xBF, 0x42, 0x57, 0x25, 0x55, 0x80, 0x7F, 0x86, 0xD6, 0x59, 0xB1, 0x23, 0x6C, 0x4C, 0x35, 0x6E, 0x34, 0x24, 0xAE, 0x92, 0x36, 0x73, 0xA0, 0x14, 0xB3, 0x49, 0x60, 0xD3, 0xFE, 0x84, 0x9F, 0xF3, 0xD8, 0x20, 0x5C, 0xAF, 0xB6, 0x26, 0xB0, 0xE7, 0x16, 0xE1, 0xE5, 0xE2, 0xA8, 0x9D, 0x28, 0xC7, 0x5D, 0x01, 0x8B, 0x7B, 0xC6, 0xF9, 0xCD, 0xC1, 0x7E, 0xC3, 0x0A, 0x8D, 0xDF, 0xE9, 0x15, 0x68, 0xF4, 0xA1, 0x57, 0xA7, 0x79, 0x4B, 0xB9, 0xB8, 0xFA, 0xFD, 0xEB, 0xE3, 0xA3, 0x6E, 0x55, 0x3B, 0x03, 0x9F, 0x59, 0x4F, 0x13, 0xA5, 0x2A, 0x07, 0x2D, 0x99, 0x5B, 0x8F, 0x0B, 0x7D, 0x8C, 0x05, 0x95, 0x04, 0x12, 0x2C, 0x8E, 0x4E, 0x48, 0xDA, 0x17, 0xD1, 0x94, 0xCF, 0xB4, 0x1B, 0x26, 0x41, 0x02, 0x6A, 0x11, 0x4D, 0x3C, 0x6C, 0x42, 0x06, 0x57, 0x37, 0x9E, 0x43, 0x89, 0x23, 0x2B, 0xF8, 0x09, 0x8A, 0x29, 0x56, 0x77, 0x97, 0x8D, 0x7A, 0x49, 0xDD, 0x2F, 0x08, 0x3E, 0x86, 0x3D, 0x9D, 0x5C, 0x14, 0x90, 0xAC, 0xF6, 0x1F, 0x25, 0x10, 0x39, 0x65, 0x20, 0x7F, 0x76, 0x34, 0x58, 0xF5, 0x47, 0x01, 0xCE, 0x1D, 0x73, 0xFB, 0x8B, 0x6B, 0x50, 0x75, 0x6F, 0x62, 0xA4, 0xDE, 0x93, 0x92, 0x35, 0x19, 0xFE, 0x80, 0x0D, 0xA2, 0xEE, 0x38, 0x33, 0xE0, 0x4C, 0x84, 0x5A, 0x22, 0x32, 0xD0, 0x79, 0x0E, 0x36, 0xD5, 0xBC, 0xC2, 0x9A, 0xA6, 0x85, 0x16, 0x1E, 0x5D, 0x00, 0x0A, 0xF7, 0x4A, 0x6D, 0xB8, 0x60, 0xC8, 0xC9, 0x51, 0xA9, 0xF9, 0xDB, 0x2D, 0x4B, 0x5F, 0x0F, 0x6E, 0x5E, 0x18, 0xF2, 0xA0, 0x74, 0xB6, 0x24, 0xAD, 0x88, 0x30, 0xDC, 0x45, 0xBF, 0x04, 0x87, 0x21, 0x1A, 0x5B, 0x31, 0xED, 0xBE, 0x9B, 0x3A, 0x02, 0x0C, 0xD9, 0x40, 0x55, 0x7C, 0x9F, 0x1C, 0x9E, 0x61, 0x28, 0xAB, 0x81, 0x2E, 0x67, 0x44, 0xE2, 0x80, 0x2A, 0xDF, 0xB7, 0x7D, 0xB2, 0x1B, 0x03, 0x26, 0x98, 0x09, 0x54, 0x3F, 0x7F, 0x41, 0x7B, 0x53, 0xEF, 0xEA, 0x83, 0x27, 0x8D, 0x78, 0xC5, 0xCE, 0x96, 0x39, 0x5D, 0x3E, 0x05, 0x07, 0x06, 0x0B, 0x0A, 0x0D, 0x0C, 0x09, 0x08, 0x13, 0x12, 0x11, 0x10, 0x17, 0x16, 0x15, 0x14, 0x1B, 0x1A, 0x19, 0x18, 0x1F, 0x1E, 0x1D, 0x1C, 0x23, 0x22, 0x21, 0x20, 0x27, 0x26, 0x25, 0x24, 0x2B, 0x2A, 0x29, 0x28, 0x2F, 0x2E, 0x2D, 0x2C, 0x33, 0x32, 0x31, 0x30, 0x37, 0x36, 0x35, 0x34, 0x3B, 0x3A, 0x39, 0x38, 0x3F, 0x3E, 0x3D, 0x3C, 0x43, 0x42, 0x41, 0x40, 0x47, 0x46, 0x45, 0x44, 0x4B, 0x4A, 0x49, 0x48, 0x4F, 0x4E, 0x4D, 0x4C, 0x53, 0x52, 0x51, 0x50, 0x57, 0x56, 0x55, 0x54, 0x5B, 0x5A, 0x59, 0x58, 0x5F, 0x5E, 0x5D, 0x5C, 0x63, 0x62, 0x61, 0x60, 0x67, 0x66, 0x65, 0x64, 0x6B, 0x6A, 0x69, 0x68, 0x6F, 0x6E, 0x6D, 0x6C, 0x73, 0x72, 0x71, 0x70, 0x77, 0x76, 0x75, 0x74, 0x7B, 0x7A, 0x79, 0x78, 0x7F, 0x7E, 0x7D, 0x7C, 0x83, 0x82, 0x81, 0x80, 0x87, 0x86, 0x85, 0x84, 0x8B, 0x8A, 0x89, 0x88, 0x8F, 0x8E, 0x8D, 0x8C, 0x93, 0x92, 0x91, 0x90, 0x97, 0x96, 0x95, 0x94, 0x9B, 0x9A, 0x99, 0x98, 0x9F, 0x9E, 0x9D, 0x9C, 0xA3, 0xA2, 0xA1, 0xA0, 0xA7, 0xA6, 0xA5, 0xA4, 0xAB, 0xAA, 0xA9, 0xA8, 0xAF, 0xAE, 0xAD, 0xAC, 0xB3, 0xB2, 0xB1, 0xB0, 0xB7, 0xB6, 0xB5, 0xB4, 0xBB, 0xBA, 0xB9, 0xB8, 0xBF, 0xBE, 0xBD, 0xBC, 0xC3, 0xC2, 0xC1, 0xC0, 0xC7, 0xC6, 0xC5, 0xC4, 0xCB, 0xCA, 0xC9, 0xC8, 0xCF, 0xCE, 0xCD, 0xCC, 0xD3, 0xD2, 0xD1, 0xD0, 0xD7, 0xD6, 0xD5, 0xD4, 0xDB, 0xDA, 0xD9, 0xD8, 0xDF, 0xDE, 0xDD, 0xDC, 0xE3, 0xE2, 0xE1, 0xE0, 0xE7, 0xE6, 0xE5, 0xE4, 0xEB, 0xEA, 0xE9, 0xE8, 0xEF, 0xEE, 0xED, 0xEC, 0xF3, 0xF2, 0xF1, 0xF0, 0xF7, 0xF6, 0xF5, 0xF4, 0xFB, 0xFA, 0xF9, 0xF8, 0xFF, 0xFE, 0xFD, 0xFC };

            for (int i = 0; i < 256; i++)
            {
                P[0, i] = p0[i];
                P[1, i] = p1[i];
            }
        }

        public string AlgorithmName => "Twofish";
        public bool IsPartialBlockOkay => false;

        public int GetBlockSize() => BlockSize;

        public void Init(bool forEncryption, ICipherParameters parameters)
        {
            if (!(parameters is KeyParameter keyParams))
                throw new ArgumentException("Invalid parameters passed to Twofish init - KeyParameter required", nameof(parameters));

            this._forEncryption = forEncryption;
            SetKey(keyParams.GetKey());
        }

        public int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
        {
            if (_gSubKeys == null)
                throw new InvalidOperationException("Twofish engine not initialised");
            if ((inOff + BlockSize) > input.Length)
                throw new ArgumentException("Input buffer too short");
            if ((outOff + BlockSize) > output.Length)
                throw new ArgumentException("Output buffer too short");

            if (_forEncryption)
            {
                EncryptBlock(input, inOff, output, outOff);
            }
            else
            {
                DecryptBlock(input, inOff, output, outOff);
            }

            return BlockSize;
        }

        public int ProcessBlock(ReadOnlySpan<byte> input, Span<byte> output)
        {
            if (_gSubKeys == null)
                throw new InvalidOperationException("Twofish engine not initialised");
            if (input.Length < BlockSize)
                throw new ArgumentException("Input buffer too short");
            if (output.Length < BlockSize)
                throw new ArgumentException("Output buffer too short");

            if (_forEncryption)
            {
                EncryptBlock(input, output);
            }
            else
            {
                DecryptBlock(input, output);
            }

            return BlockSize;
        }

        public void Reset() { }

        private void SetKey(byte[] key)
        {
            int keyBits = key.Length * 8;
            int keyWords = key.Length / 4;

            uint[] k = new uint[MaxKeyWords];
            for (int i = 0; i < keyWords; i++)
            {
                k[i] = ToUInt32(key, i * 4);
            }

            int M_k = keyWords / 2;
            uint[] Me = new uint[M_k];
            uint[] Mo = new uint[M_k];

            for (int i = 0; i < M_k; i++)
            {
                Me[i] = k[2 * i];
                Mo[i] = k[2 * i + 1];
            }

            uint[] s = new uint[MaxKeyWords / 2];
            _gSubKeys = new uint[40];

            for (int i = M_k - 1; i >= 0; i--)
            {
                s[i] = Mds(Me[i], Mo[i]);
            }

            for (int i = 0; i < 20; i++)
            {
                uint A = H(2 * (uint)i, Me, M_k);
                uint B = Rotl(H(2 * (uint)i + 1, Mo, M_k), 8);
                _gSubKeys[2 * i] = A + B;
                _gSubKeys[2 * i + 1] = Rotl(A + 2 * B, 9);
            }

            _gSBox = s;
        }

        private uint H(uint x, uint[] K, int k)
        {
            uint y = x;
            switch (k)
            {
                case 4:
                    y = P[1, (byte)y] ^ K[3];
                    y = P[0, (byte)(y >> 8)] ^ y;
                    y = P[0, (byte)(y >> 16)] ^ y;
                    y = P[1, (byte)(y >> 24)] ^ y;
                    break;
                case 3:
                    y = P[1, (byte)y] ^ K[2];
                    y = P[0, (byte)(y >> 8)] ^ y;
                    y = P[1, (byte)(y >> 16)] ^ y;
                    y = P[0, (byte)(y >> 24)] ^ y;
                    break;
                case 2:
                    y = P[1, (byte)y] ^ K[1];
                    y = P[1, (byte)(y >> 8)] ^ y;
                    y = P[0, (byte)(y >> 16)] ^ y;
                    y = P[0, (byte)(y >> 24)] ^ y;
                    break;
            }
            return y;
        }

        private uint Mds(uint a, uint b)
        {
            uint result = 0;
            for (int i = 0; i < 4; i++)
            {
                result ^= Mds_rem(a, b);
                a = Rotr(a, 8);
                b = Rotr(b, 8);
            }
            return result;
        }

        private uint Mds_rem(uint a, uint b)
        {
            uint p0 = (byte)a;
            uint p1 = (byte)(a >> 8);
            uint p2 = (byte)(a >> 16);
            uint p3 = (byte)(a >> 24);

            uint q0 = (byte)b;
            uint q1 = (byte)(b >> 8);
            uint q2 = (byte)(b >> 16);
            uint q3 = (byte)(b >> 24);

            uint m0 = p0 ^ q0;
            uint m1 = p1 ^ q1;
            uint m2 = p2 ^ q2;
            uint m3 = p3 ^ q3;

            return m0 + (m1 << 8) + (m2 << 16) + (m3 << 24);
        }

        private void EncryptBlock(byte[] input, int inOff, byte[] output, int outOff)
        {
            uint x0 = ToUInt32(input, inOff);
            uint x1 = ToUInt32(input, inOff + 4);
            uint x2 = ToUInt32(input, inOff + 8);
            uint x3 = ToUInt32(input, inOff + 12);

            x0 ^= _gSubKeys![0];
            x1 ^= _gSubKeys![1];
            x2 ^= _gSubKeys![2];
            x3 ^= _gSubKeys![3];

            for (int i = 0; i < Rounds; i++)
            {
                uint t0 = G0(x0);
                uint t1 = G1(x1);
                x2 = Rotr(x2 ^ (t0 + t1 + _gSubKeys![2 * i + 8]), 1);
                x3 = Rotl(x3, 1) ^ (t0 + 2 * t1 + _gSubKeys![2 * i + 9]);

                t0 = G0(x2);
                t1 = G1(x3);
                x0 = Rotr(x0 ^ (t0 + t1 + _gSubKeys![2 * i + 10]), 1);
                x1 = Rotl(x1, 1) ^ (t0 + 2 * t1 + _gSubKeys![2 * i + 11]);
            }

            x2 ^= _gSubKeys![4];
            x3 ^= _gSubKeys![5];
            x0 ^= _gSubKeys![6];
            x1 ^= _gSubKeys![7];

            ToBytes(x2, output, outOff);
            ToBytes(x3, output, outOff + 4);
            ToBytes(x0, output, outOff + 8);
            ToBytes(x1, output, outOff + 12);
        }

        private void EncryptBlock(ReadOnlySpan<byte> input, Span<byte> output)
        {
            uint x0 = ToUInt32(input);
            uint x1 = ToUInt32(input.Slice(4));
            uint x2 = ToUInt32(input.Slice(8));
            uint x3 = ToUInt32(input.Slice(12));

            x0 ^= _gSubKeys![0];
            x1 ^= _gSubKeys![1];
            x2 ^= _gSubKeys![2];
            x3 ^= _gSubKeys![3];

            for (int i = 0; i < Rounds; i++)
            {
                uint t0 = G0(x0);
                uint t1 = G1(x1);
                x2 = Rotr(x2 ^ (t0 + t1 + _gSubKeys![2 * i + 8]), 1);
                x3 = Rotl(x3, 1) ^ (t0 + 2 * t1 + _gSubKeys![2 * i + 9]);

                t0 = G0(x2);
                t1 = G1(x3);
                x0 = Rotr(x0 ^ (t0 + t1 + _gSubKeys![2 * i + 10]), 1);
                x1 = Rotl(x1, 1) ^ (t0 + 2 * t1 + _gSubKeys![2 * i + 11]);
            }

            x2 ^= _gSubKeys![4];
            x3 ^= _gSubKeys![5];
            x0 ^= _gSubKeys![6];
            x1 ^= _gSubKeys![7];

            ToBytes(x2, output);
            ToBytes(x3, output.Slice(4));
            ToBytes(x0, output.Slice(8));
            ToBytes(x1, output.Slice(12));
        }

        private void DecryptBlock(byte[] input, int inOff, byte[] output, int outOff)
        {
            uint x2 = ToUInt32(input, inOff);
            uint x3 = ToUInt32(input, inOff + 4);
            uint x0 = ToUInt32(input, inOff + 8);
            uint x1 = ToUInt32(input, inOff + 12);

            x2 ^= _gSubKeys![4];
            x3 ^= _gSubKeys![5];
            x0 ^= _gSubKeys![6];
            x1 ^= _gSubKeys![7];

            for (int i = Rounds - 1; i >= 0; i--)
            {
                uint t0 = G0(x2);
                uint t1 = G1(x3);
                x0 = Rotl(x0, 1) ^ (t0 + t1 + _gSubKeys![2 * i + 10]);
                x1 = Rotr(x1 ^ (t0 + 2 * t1 + _gSubKeys![2 * i + 11]), 1);

                t0 = G0(x0);
                t1 = G1(x1);
                x2 = Rotl(x2, 1) ^ (t0 + t1 + _gSubKeys![2 * i + 8]);
                x3 = Rotr(x3 ^ (t0 + 2 * t1 + _gSubKeys![2 * i + 9]), 1);
            }

            x0 ^= _gSubKeys![0];
            x1 ^= _gSubKeys![1];
            x2 ^= _gSubKeys![2];
            x3 ^= _gSubKeys![3];

            ToBytes(x0, output, outOff);
            ToBytes(x1, output, outOff + 4);
            ToBytes(x2, output, outOff + 8);
            ToBytes(x3, output, outOff + 12);
        }

        private void DecryptBlock(ReadOnlySpan<byte> input, Span<byte> output)
        {
            uint x2 = ToUInt32(input);
            uint x3 = ToUInt32(input.Slice(4));
            uint x0 = ToUInt32(input.Slice(8));
            uint x1 = ToUInt32(input.Slice(12));

            x2 ^= _gSubKeys![4];
            x3 ^= _gSubKeys![5];
            x0 ^= _gSubKeys![6];
            x1 ^= _gSubKeys![7];

            for (int i = Rounds - 1; i >= 0; i--)
            {
                uint t0 = G0(x2);
                uint t1 = G1(x3);
                x0 = Rotl(x0, 1) ^ (t0 + t1 + _gSubKeys![2 * i + 10]);
                x1 = Rotr(x1 ^ (t0 + 2 * t1 + _gSubKeys![2 * i + 11]), 1);

                t0 = G0(x0);
                t1 = G1(x1);
                x2 = Rotl(x2, 1) ^ (t0 + t1 + _gSubKeys![2 * i + 8]);
                x3 = Rotr(x3 ^ (t0 + 2 * t1 + _gSubKeys![2 * i + 9]), 1);
            }

            x0 ^= _gSubKeys![0];
            x1 ^= _gSubKeys![1];
            x2 ^= _gSubKeys![2];
            x3 ^= _gSubKeys![3];

            ToBytes(x0, output);
            ToBytes(x1, output.Slice(4));
            ToBytes(x2, output.Slice(8));
            ToBytes(x3, output.Slice(12));
        }

        private uint G0(uint x)
        {
            return H(x, _gSBox!, _gSBox!.Length);
        }

        private uint G1(uint x)
        {
            return H(Rotl(x, 8), _gSBox!, _gSBox!.Length);
        }

        private static uint Rotl(uint x, int n) => (x << n) | (x >> (32 - n));
        private static uint Rotr(uint x, int n) => (x >> n) | (x << (32 - n));

        private static uint ToUInt32(byte[] buf, int off) => (uint)buf[off] | (uint)buf[off + 1] << 8 | (uint)buf[off + 2] << 16 | (uint)buf[off + 3] << 24;
        private static uint ToUInt32(ReadOnlySpan<byte> buf) => (uint)buf[0] | (uint)buf[1] << 8 | (uint)buf[2] << 16 | (uint)buf[3] << 24;

        private static void ToBytes(uint val, byte[] buf, int off)
        {
            buf[off] = (byte)val;
            buf[off + 1] = (byte)(val >> 8);
            buf[off + 2] = (byte)(val >> 16);
            buf[off + 3] = (byte)(val >> 24);
        }

        private static void ToBytes(uint val, Span<byte> buf)
        {
            buf[0] = (byte)val;
            buf[1] = (byte)(val >> 8);
            buf[2] = (byte)(val >> 16);
            buf[3] = (byte)(val >> 24);
        }
    }
}
